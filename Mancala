import random, copy
from cmu_112_graphics import *

def appStarted(app):
    app.board = [[0],[[4, 4, 4, 4, 4, 4], 
                     [4, 4, 4, 4, 4, 4]], [0]]
    app.margin = 10
    app.homeBoardWidth = app.width/8
    app.homeBoardHeight = app.height/6

    # current player is 1 or 2, where the computer can be 2
    app.currentPlayer = 1
    app.player1MadeTurn = False
    app.player2MadeTurn = False
    app.selectR = -1
    app.selectC = -1
    
    # game variables relating to moving the pebbles
    app.orginalNumPebbles = -1
    app.currNumPebbles = -1

    app.timerDelay = 1000

    # states of the game varibles
    app.selectRow = True
    app.illegalRowClick = False
    app.zeroCellClick = False
    app.takeAnotherTurn = False
    app.gameOver = False

def keyPressed(app, event):
    if event.key == "r":
        appStarted(app)

def getCell(app, x, y):
    cellsWidthStart = app.homeBoardWidth+app.margin 
    cellsWidthEnd = app.width-app.margin-app.homeBoardWidth

    cellsHeightStart = app.height/2
    cellsHeightEnd = app.height/2+app.homeBoardHeight

    cellWidth = (cellsWidthEnd-cellsWidthStart)/6
    cellHeight = (cellsHeightEnd-cellsHeightStart)/2   

    col = int((x-cellsWidthStart)/cellWidth)
    row = int((y-cellsHeightStart)/cellHeight)

    return (row, col)

def mousePressed(app, event):
    if app.takeAnotherTurn:
        app.takeAnotherTurn = False
    if app.currentPlayer == 1:
        app.player1MadeTurn = True
        (app.selectR, app.selectC) = getCell(app, event.x, event.y)
        if not 0<=app.selectR<2 and 0<=app.selectC<6: 
            app.player1MadeTurn = app.player2MadeTurn = False
            return
        app.originalNumPebbles = app.currNumPebbles = app.board[1][app.selectR][app.selectC] 
    elif app.currentPlayer == 2:
        app.player2MadeTurn = True
        (app.selectR, app.selectC) = getCell(app, event.x, event.y)
        if not 0<=app.selectR<2 and 0<=app.selectC<6: 
            app.player1MadeTurn = app.player2MadeTurn = False
            return       
        app.originalNumPebbles = app.currNumPebbles = app.board[1][app.selectR][app.selectC] 

def movePebble(app, newR, newC):
    # move one pebble from startR startC to newR newC
    app.currNumPebbles-=1
    app.board[1][newR][newC]+=1

def moveToPlayer1Home(app):
    app.currNumPebbles-=1
    app.board[2][0]+=1
    if app.currNumPebbles == 0:
        app.takeAnotherTurn = True

def moveToPlayer2Home(app):
    app.currNumPebbles-=1
    app.board[0][0]+=1
    if app.currNumPebbles == 0:
        app.takeAnotherTurn = True

def takeTurnPlayer1(app, startR, startC):
    if app.originalNumPebbles == 0:
        app.zeroCellClick = True
        return
    app.zeroCellClick = False
    
    if startR != 1: 
        app.illegalRowClick = True
        return

    if app.takeAnotherTurn:
        return

    app.illegalRowClick = False
    if app.currNumPebbles == 0 and not app.takeAnotherTurn:
        app.selectR = -1
        app.selectC = -1
        app.player1MadeTurn = False
        app.currentPlayer = 2
        return
    if app.currentPlayer == 1:
        numberMove = app.originalNumPebbles - (app.currNumPebbles-1)
        newR = 1
        newC = startC+numberMove
        app.board[1][startR][startC]=0
        if 0<=newR<2 and 0<=(newC%13)<6 and app.currNumPebbles>=0:
            movePebble(app, startR, startC, newR, newC%13)
        elif (newC%12) == 0 and app.currNumPebbles>=0:
            wrapR = 0
            wrapC = 0
            movePebble(app, startR, startC, wrapR, wrapC)
        elif (newC%6) == 0 and app.currNumPebbles>=0:
            print("moved home!")
            moveToPlayer1Home(app, startR, startC)
        elif (newC%12)>6 and app.currNumPebbles>=0:
            wrapR = 0
            wrapC = 6-(newC%6)
            movePebble(app, startR, startC, wrapR, wrapC)

def takeTurnPlayer2(app, startR, startC):
    if app.originalNumPebbles == 0:
        app.zeroCellClick = True
        return
    app.zeroCellClick = False
    if startR != 0: 
        app.illegalRowClick = True
        return

    if app.takeAnotherTurn:
        return

    app.illegalRowClick = False
    if app.currNumPebbles == 0 and not app.takeAnotherTurn:
        app.selectR = -1
        app.selectC = -1
        app.player2MadeTurn = False
        app.currentPlayer = 1
        return
    if app.currentPlayer == 2:
        numberMove = app.originalNumPebbles - (app.currNumPebbles-1)
        newR = 0
        newC = startC-numberMove
        app.board[1][startR][startC]=0
        if 0<=newR<2 and 0<=(newC%13)<6 and app.currNumPebbles>=0:
            movePebble(app, startR, startC, newR, newC%13)
        elif (newC%12) == 0 and app.currNumPebbles>=0:
            wrapR = 0
            wrapC = 0
            movePebble(app, startR, startC, wrapR, wrapC)
        elif newC==-1 and app.currNumPebbles>=0:
            print("moved home!")
            moveToPlayer2Home(app, startR, startC)
        elif newC<0 and app.currNumPebbles>=0:
            wrapR = 1
            wrapC = abs(newC)%(6) - 2
            movePebble(app, startR, startC, wrapR, wrapC)

def timerFired(app):
    if app.board[0][0]>=24 or app.board[2][0]>=24:
        app.gameOver = True
    if app.player1MadeTurn:
        takeTurnPlayer1(app, app.selectR, app.selectC)
    elif app.player2MadeTurn:
        takeTurnPlayer2(app, app.selectR, app.selectC)

def redrawAll(app, canvas):
    drawGameInfo(app, canvas)
    drawBoard(app, canvas)

def getCellBounds(app, row, col):
    cellsWidthStart = app.homeBoardWidth+app.margin 
    cellsWidthEnd = app.width-app.margin-app.homeBoardWidth

    cellsHeightStart = app.height/2
    cellsHeightEnd = app.height/2+app.homeBoardHeight

    cellWidth = (cellsWidthEnd-cellsWidthStart)/6
    cellHeight = (cellsHeightEnd-cellsHeightStart)/2

    x0 = cellsWidthStart+(col*cellWidth)
    x1 = cellsWidthStart+((col+1)*cellWidth)
    y0 = cellsHeightStart+(row*cellHeight)
    y1 = cellsHeightStart+((row+1)*cellHeight)

    return x0, y0, x1, y1

def drawGameInfo(app, canvas):
    canvas.create_text(app.width/2, app.height/4, text="Mancala!", font="Arial 40 bold")
    canvas.create_text(app.width/2, app.height/3, text=f'Current Player: player {app.currentPlayer}', font="Arial 20 bold")

    if not app.player1MadeTurn and not app.player2MadeTurn:
        canvas.create_text(app.width/2, app.height*(2/5), text=f'Please select a cell to begin.', font="Arial 20 bold")
    else:
        if app.zeroCellClick: 
            canvas.create_text(app.width/2, app.height*(2/5), text="Please select a non-zero cell", font="Arial 20 bold")
        elif app.takeAnotherTurn: 
            canvas.create_text(app.width/2, app.height*(2/5), text="Take another turn", font="Arial 20 bold")
        elif app.illegalRowClick: 
            canvas.create_text(app.width/2, app.height*(2/5), text="Please select a cell in the other row", font="Arial 20 bold")
        else:
            canvas.create_text(app.width/2, app.height*(2/5), text=f'Pebbles on hand: {app.currNumPebbles}', font="Arial 20 bold")

def drawBoard(app, canvas):
    #app.board[0]
    canvas.create_rectangle(app.margin, app.height/2, app.homeBoardWidth+app.margin, app.height/2+app.homeBoardHeight, fill="orange")
    canvas.create_text((app.margin+app.homeBoardWidth+app.margin)/2, (app.height/2+app.height/2+app.homeBoardHeight)/2, text=app.board[0], font="Arial 20 bold")

    # loop through actual inner list - app.board[1]
    for row in range(len(app.board[1])):
        for col in range(len(app.board[1][0])):
            (x0, y0, x1, y1) = getCellBounds(app, row, col)
            canvas.create_rectangle(x0, y0, x1, y1, fill="orange")
            canvas.create_oval(x0, y0, x1, y1, fill="blue")
            canvas.create_text((x0+x1)/2, (y0+y1)/2, text=app.board[1][row][col], font="Arial 20 bold")

    # app.board[2]
    canvas.create_rectangle(app.width-app.margin-app.homeBoardWidth, app.height/2, app.width-app.margin, app.height/2+app.homeBoardHeight, fill="orange")
    canvas.create_text((app.width-app.margin-app.homeBoardWidth+app.width-app.margin)/2, (app.height/2+app.height/2+app.homeBoardHeight)/2, text=app.board[2], font="Arial 20 bold")

runApp(width=600, height=600)