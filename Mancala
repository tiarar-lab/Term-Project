
"""
15-112 Term Project
Tiara Rathi
tiarar
"""

import random, copy, math
from cmu_112_graphics import *

# restarts the game
def appStarted(app):
    app._root.resizable(False, False)

    restartGame(app)

    # modes variables
    app.inHomeScreen = True
    app.inEasyMode = False
    app.inMedMode = False
    app.inHardMode = False

    # image variables
    url = 'https://i.pinimg.com/originals/36/da/c8/36dac879a9e5005a47aed7dd0e31fcd6.jpg'
    app.image1 = app.scaleImage(app.loadImage(url), 3/3)

class Pebble(object):
    def __init__(self, cellX0, cellY0, app):
        self.x0 = cellX0
        self.y0 = cellY0

        cellsWidthStart = app.homeBoardWidth+app.margin 
        cellsWidthEnd = app.width-app.margin-app.homeBoardWidth

        cellsHeightStart = app.height/2
        cellsHeightEnd = app.height/2+app.homeBoardHeight

        cellWidth = (cellsWidthEnd-cellsWidthStart)/6
        cellHeight = (cellsHeightEnd-cellsHeightStart)/2

        cellR = (cellHeight/2)-3

        # x and y are relative to the top of the cell
        self.distX = random.uniform(cellR, cellWidth-cellR)
        self.distY = random.uniform(cellR, cellHeight-cellR)
        self.cx = self.x0+self.distX
        self.cy = self.y0+self.distY
        self.r = 5
        self.color = random.choice(app.pebbleColors)
    
    def setX0(self, newX0):
        self.x0 = newX0
        self.cx = self.x0+self.distX

    def setY0(self, newY0):
        self.y0 = newY0
        self.cy = self.y0+self.distY

def restartGame(app):
        # board variables
    app.board = [[0],[[4, 4, 4, 4, 4, 4], 
                     [4, 4, 4, 4, 4, 4]], [0]]
    app.margin = 10
    app.homeBoardWidth = app.width/8
    app.homeBoardHeight = app.height/6

    # player variables
        # current player is 1 or 2, where the computer can be 2 and user is 1
    app.currentPlayer = 1
    app.player1MadeTurn = False
    app.player2MadeTurn = False
    app.selectR = -1
    app.selectC = -1
    
    # player column variables
    app.player1OnRow = ([0, 1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 
                            26, 27, 28, 29, 30, 31, 39, 40, 41, 42, 43, 44, 52])
    app.player1InMancala = [6, 19, 32, 45]
    app.player1Wrap = ([7, 8, 9, 10, 11, 12, 20, 21, 22, 23, 24, 25, 33, 34, 
                                        35, 36, 37, 38, 46, 47, 48, 49, 50, 51])
    app.player1In00 = [12, 25, 38, 51]

    app.player2OnRow = ([5, 4, 3, 2, 1, 0, -8, -9, -10, -11, -12, -13, -21, 
            -22, -23, -24, -25, -26, -34, -35, -36, -37, -38, -39, -47, -48])
    app.player2InMancala = [-1, -14, -27, -40]
    app.player2Wrap = ([-2, -3, -4, -5, -6, -7, -15, -16, -17, -18, -19, -20, 
                    -28, -29, -30, -31, -32, -33, -41, -42, -43, -44, -45, -46])

    # game variables relating to moving the pebbles
    app.orginalNumPebbles = -1
    app.currNumPebbles = -1
    app.didFullCircle = False

    # states of the game varibles
    app.illegalRowClick = False
    app.zeroCellClick = False
    app.takeAnotherTurn = False
    app.playInProgress = False
    app.paused = False
    app.gameOver = False
    app.winner = None

    # time variables
    app.timerDelay = 300

    # computer variables
    app.inComputerMode = False

    # pebbles variables
    app.pebbleColors = ["skyblue", "mediumseagreen", "lightcoral", "khaki1"]
    app.pebbles = createPebbles(app)

# used when any key pressed
def keyPressed(app, event):
    # ignore keys other than choosing a mode in home screen
    if app.inHomeScreen and (event.key != "e" and event.key!="m" and event.key!="h"):
        return
    # restart game
    if event.key == "r":
        restartGame(app)
    # ignore keys when game over
    elif app.gameOver: return
    elif event.key == "e":
        app.inHomeScreen = False
        app.inEasyMode = True
        app.inMedMode = False
        app.inHardMode = False
        restartGame(app)
    elif event.key == "m":
        app.inHomeScreen = False
        app.inEasyMode = False
        app.inMedMode = True
        app.inHardMode = False
        restartGame(app)
    elif event.key == "h":
        app.inHomeScreen = False
        app.inEasyMode = False
        app.inMedMode = False
        app.inHardMode = True
        restartGame(app)
    elif event.key == "Space":
        app.inHomeScreen = True
        app.inEasyMode = False
        app.inMedMode = False
        app.inHardMode = False
        restartGame(app)
    # pauses game
    elif event.key == "p":
        app.paused = not app.paused
    # automatically end game
    elif event.key == "w":
        determineWinner(app)
        app.gameOver = True 
    # switch to computer mode
    elif event.key == "c":
        app.inComputerMode = True

# gives cell for a specified x y
def getCell(app, x, y):
    cellsWidthStart = app.homeBoardWidth+app.margin 
    cellsWidthEnd = app.width-app.margin-app.homeBoardWidth

    cellsHeightStart = app.height/2
    cellsHeightEnd = app.height/2+app.homeBoardHeight

    cellWidth = (cellsWidthEnd-cellsWidthStart)/6
    cellHeight = (cellsHeightEnd-cellsHeightStart)/2   

    col = int((x-cellsWidthStart)/cellWidth)
    row = int((y-cellsHeightStart)/cellHeight)

    return (row, col)

# gives row col pair for x y values
def getCellBounds(app, row, col):
    cellsWidthStart = app.homeBoardWidth+app.margin 
    cellsWidthEnd = app.width-app.margin-app.homeBoardWidth

    cellsHeightStart = app.height/2
    cellsHeightEnd = app.height/2+app.homeBoardHeight

    cellWidth = (cellsWidthEnd-cellsWidthStart)/6
    cellHeight = (cellsHeightEnd-cellsHeightStart)/2

    x0 = cellsWidthStart+(col*cellWidth)
    x1 = cellsWidthStart+((col+1)*cellWidth)
    y0 = cellsHeightStart+(row*cellHeight)
    y1 = cellsHeightStart+((row+1)*cellHeight)

    return x0, y0, x1, y1

# used when mouse pressed
def mousePressed(app, event):
    # ignore mouses pressess
    if app.inHomeScreen or app.gameOver or app.playInProgress or (app.inComputerMode and 
        app.currentPlayer == 2): 
        return

    if event.x<(app.margin+app.homeBoardWidth):
        return

    # only allowing one extra turn
    if app.takeAnotherTurn:
        app.takeAnotherTurn = False
    
    # waiting for player 1 to interact
    if app.currentPlayer == 1:
        app.player1MadeTurn = True
        (app.selectR, app.selectC) = getCell(app, event.x, event.y)
        if not (0<=app.selectR<2 and 0<=app.selectC<6): 
            app.player1MadeTurn = app.player2MadeTurn = False
            return
        app.originalNumPebbles = app.currNumPebbles = (app.board[1]
                                                    [app.selectR][app.selectC])

    # waiting for player 2 to interact
    elif app.currentPlayer == 2:
        app.player2MadeTurn = True
        (app.selectR, app.selectC) = getCell(app, event.x, event.y)
        if not 0<=app.selectR<2 and 0<=app.selectC<6: 
            app.player1MadeTurn = app.player2MadeTurn = False
            return       
        app.originalNumPebbles = app.currNumPebbles = (app.board[1]
                                                    [app.selectR][app.selectC])

# computer's turn to make a move
def computerMode(app):
    if app.inEasyMode:
        if app.gameOver: return
        if app.inComputerMode and app.currentPlayer == 2:
            app.player2MadeTurn = True
            app.selectR = 0
            # if no good guesses can be made it will just choose the 
            # first non-zero cell it sees
            app.selectC = nonZeroGuess(app)
            app.originalNumPebbles = app.currNumPebbles = (app.board[1]
                                                [app.selectR][app.selectC])
    elif app.inMedMode:
        if app.gameOver: return
        if app.inComputerMode and app.currentPlayer == 2:
            app.player2MadeTurn = True
            app.selectR = 0
            # first check the easiest and smartest guess
            if simpleSmartGuess(app) != -1:
                app.selectC = simpleSmartGuess(app)
            # if no good guesses can be made it will just choose the 
            # first non-zero cell it sees
            else:
                app.selectC = nonZeroGuess(app)
            app.originalNumPebbles = app.currNumPebbles = (app.board[1]
                                                [app.selectR][app.selectC])
    elif app.inHardMode:
        if app.gameOver: return
        if app.inComputerMode and app.currentPlayer == 2:
            app.player2MadeTurn = True
            app.selectR = 0
            # first check the easiest and smartest guess
            if simpleSmartGuess(app) != -1:
                app.selectC = simpleSmartGuess(app)
            # then i will put more complex guesses here
            elif app.board[1][0][complexSmartGuess(app)] != 0:
                app.selectC = complexSmartGuess(app)
            # if no good guesses can be made it will just choose the 
            # first non-zero cell it sees
            else:
                app.selectC = nonZeroGuess(app)
            app.originalNumPebbles = app.currNumPebbles = (app.board[1]
                                                [app.selectR][app.selectC])

# computer guess to get another turn
def simpleSmartGuess(app):
    # easy move to guarantee another turn
    chosenCol = -1
    currRow = app.board[1][0]
    for i in range(len(currRow)):
        if currRow[i] == i+1:
            chosenCol = i
            break
    return chosenCol

# computer guess with minimax
def complexSmartGuess(app):
    # pos player = computer
    board = copy.deepcopy(app.board)
    val, col = minmax(board, 3, 10, 15, app)
    return col 

# computer picks non zero cell
def nonZeroGuess(app):
    chosenCol = -1
    currRow = app.board[1][0]
    for i in range(len(currRow)):
        if currRow[i] != 0:
            chosenCol = i
            break
    return chosenCol

# predicts all possible outcomes and chooses best cell
    # minmax function formatting inspired by 
    # https://www.youtube.com/watch?v=fInYh90YMJU&t=607s
def minmax(board, depth, player, bestCol, app, anotherTurn=False):
    if depth == 0:
        return evaluateBoard(board), bestCol
    
    else:
        best = 100000*-player
        for col in range(6):
            if anotherTurn:
                for col in range(6):
                    (newBoard, newPlayer, 
                        anotherTurn) = makeMove(board, player, col, app)
                    (val, bestCol) = minmax(newBoard, depth-1, newPlayer, 
                                                        bestCol, app, anotherTurn)

            newBoard, newPlayer, anotherTurn = makeMove(board, player, col, app)
            (val, bestCol) = minmax(newBoard, depth-1, newPlayer, 
                                                        bestCol, app, anotherTurn)
            # trying to maximize result
            if player>0 and val>best:
                bestCol = col
                best = val
            elif player<0 and val<best:
                bestCol = col
                best = val
        return best, bestCol

# predict what board will look like after a col is chosen
def makeMove(board, player, col, app):
    # pos is computer, neg is user
    if player>0: # computer's turn
        newBoard, anotherTurn = player2Move(board, col, app)
        newPlayer = -10 # switch to user
    else: # user's turn
        newBoard, anotherTurn = player1Move(board, col, app)
        newPlayer = 10 # switch to computer
    return newBoard, newPlayer, anotherTurn

# determines if move is good or bad for computer
def evaluateBoard(board):
    # if computer wins, return pos infinity
    if board[0][0]>24:
        return math.inf
    # if user wins, return neg infinity
    elif board[2][0]>24:
        return -math.inf
    # else return a score: comps' home - user's home
    return board[0][0]-board[2][0]

# does one nondestructive move for player 1
def player1Move(board, col, app):
    originalNumPebbles = board[1][1][col]
    newBoard = copy.deepcopy(board)
    newBoard[1][1][col] = 0
    anotherTurn = False

    for i in range(originalNumPebbles):
        numberMove = i+1
        newR = 1
        newC = col+numberMove
        # newC is on the player's original row
        if newC in app.player1OnRow:
            movePebbleNonDestructive(newBoard, newR, newC%13)

        # distribute to (0, 0)
        elif newC in app.player1In00:
            wrapR = 0
            wrapC = 0
            movePebbleNonDestructive(newBoard, wrapR, wrapC)
        
        # to user's mancala
        elif newC in app.player1InMancala:
            moveToPlayer1HomeNonDestructive(newBoard)
            # last pebble
            if i == originalNumPebbles-1:
                anotherTurn = True

        # on the computer's side of the board
        elif newC in app.player1Wrap:
            wrapR = 0
            wrapC = 13-((newC+1)%13)
            movePebbleNonDestructive(newBoard, wrapR, wrapC)

     # when i is zero it should stop because all proper changes were made to 
     # the newBoard
    return newBoard, anotherTurn

# does one nondestructive move for player 2
def player2Move(board, col, app):
    originalNumPebbles = board[1][0][col]
    newBoard = copy.deepcopy(board)
    newBoard[1][0][col] = 0
    anotherTurn = False

    for i in range(originalNumPebbles):
        numberMove = i+1
        newR = 0
        newC = col-numberMove
        # newC is on the player's original row
        if newC in app.player2OnRow:
            movePebbleNonDestructive(newBoard, newR, newC%13)

       # to computer's mancala
        elif newC in app.player2InMancala:
            moveToPlayer2HomeNonDestructive(newBoard)
            # last pebble
            if i == originalNumPebbles-1:
                anotherTurn = True

        # distribute to (0, 0)
        elif (newC%12) == 0:
            wrapR = 0
            wrapC = 0
            movePebbleNonDestructive(newBoard, wrapR, wrapC)
        
 
        # on the user's side of the board
        elif newC in app.player2Wrap:
            wrapR = 1
            wrapC = abs(newC)%(12) - 2
            movePebbleNonDestructive(newBoard, wrapR, wrapC)

     # when i is zero it should stop because all proper changes were made 
     # to the newBoard
    return newBoard, anotherTurn

# moves pebble on copy of board
def movePebbleNonDestructive(board, newR, newC):
    board[1][newR][newC]+=1

# moves to player 1 home on copy of board
def moveToPlayer1HomeNonDestructive(board):
    board[2][0]+=1

# moves to player 2 home on copy of board
def moveToPlayer2HomeNonDestructive(board):
    board[0][0]+=1

# moves pebble on game board
def movePebble(app, board, newR, newC):
    app.currNumPebbles-=1
    board[1][newR][newC]+=1

# moves to player 1 home on game board
def moveToPlayer1Home(app, board):
    app.currNumPebbles-=1
    board[2][0]+=1
    if app.currNumPebbles == 0:
        app.takeAnotherTurn = True

# moves to player 2 home on game board
def moveToPlayer2Home(app, board):
    app.currNumPebbles-=1
    board[0][0]+=1
    if app.currNumPebbles == 0:
        app.takeAnotherTurn = True

# completes a move on game board for player 1
def takeTurnPlayer1(app, startR, startC):

    app.playInProgress = True

    # check for zero cell
    if app.originalNumPebbles == 0:
        app.zeroCellClick = True
        app.playInProgress = False
        return
    app.zeroCellClick = False
    
    # player must click in proper row
    if startR != 1: 
        app.illegalRowClick = True
        app.playInProgress = False
        return

    # ignore futher movement if waiting for player to take another turn
    if app.takeAnotherTurn:
        app.playInProgress = False
        return
    app.illegalRowClick = False

    # done with the last pebble
    if app.currNumPebbles == 0 and not app.takeAnotherTurn:
        app.playInProgress = False
        app.selectR = -1
        app.selectC = -1
        app.didFullCircle = False
        app.player1MadeTurn = False
        app.currentPlayer = 2
        if app.inComputerMode:
            computerMode(app)
        return

    # drop pebble in cell
    if app.currentPlayer == 1:
        numberMove = app.originalNumPebbles - (app.currNumPebbles-1)
        newR = 1
        newC = startC+numberMove
        if not app.didFullCircle:
            app.board[1][startR][startC]=0

        # on player 1's row
        if newC in app.player1OnRow and app.currNumPebbles>=0:
            if (newR == app.selectR and newC%13 == app.selectC):
                app.didFullCircle = True
            movePebble(app, app.board, newR, newC%13)

        # on 0, 0
        elif newC in app.player1In00 and app.currNumPebbles>=0:
            wrapR = 0
            wrapC = 0
            movePebble(app, app.board, wrapR, wrapC)

        # in player 1's home
        elif newC in app.player1InMancala and app.currNumPebbles>=0:
            moveToPlayer1Home(app, app.board)

        # in player 2's row
        elif newC in app.player1Wrap and app.currNumPebbles>=0:
            wrapR = 0
            wrapC = 13-((newC+1)%13)
            movePebble(app, app.board, wrapR, wrapC)

# completes a move on game board for player 2
def takeTurnPlayer2(app, startR, startC):

    app.playInProgress = True

    # check for zero cell
    if app.originalNumPebbles == 0:
        app.zeroCellClick = True
        app.playInProgress = False
        if app.inComputerMode:
            computerMode(app)
            app.zeroCellClick = False
        return
    app.zeroCellClick = False

    # player must click in proper row
    if startR != 0: 
        app.illegalRowClick = True
        app.playInProgress = False
        return

    # ignore futher movement if waiting for player to take another turn
    if app.takeAnotherTurn:
        app.playInProgress = False
        return
    app.illegalRowClick = False

    # done with the last pebble
    if app.currNumPebbles == 0 and not app.takeAnotherTurn:
        app.playInProgress = False
        app.selectR = -1
        app.selectC = -1
        app.didFullCircle = False
        app.player2MadeTurn = False
        app.currentPlayer = 1
        return

    # drop pebble in cell
    if app.currentPlayer == 2:
        numberMove = app.originalNumPebbles - (app.currNumPebbles-1)
        newR = 0
        newC = startC-numberMove
        if not app.didFullCircle:
            app.board[1][startR][startC]=0
        # on player 2's row
        if newC in app.player2OnRow and app.currNumPebbles>=0:
            if (newR == app.selectR and newC%13 == app.selectC):
                app.didFullCircle = True
            movePebble(app, app.board, newR, newC%13)
        # on player 2' home
        elif newC in app.player2InMancala and app.currNumPebbles>=0:
            moveToPlayer2Home(app, app.board)
        # on 0, 0
        elif (newC%12) == 0 and app.currNumPebbles>=0:
            wrapR = 0
            wrapC = 0
            movePebble(app, app.board, wrapR, wrapC)
        # in player 1's row
        elif newC in app.player2Wrap and app.currNumPebbles>=0:
            wrapR = 1
            wrapC = abs(newC)%(13) - 2
            movePebble(app, app.board, wrapR, wrapC)

    # if computer has another turn 
    if app.inComputerMode and app.takeAnotherTurn:
        computerMode(app)
        app.takeAnotherTurn = False

# run every 100ms
def timerFired(app):
    updatePebbles(app)
    # stop timer
    if app.gameOver: return
    if app.paused: return

    # reached game over and find winner
    if app.board[0][0]>24 or app.board[2][0]>24:
        app.gameOver = True
        if app.board[0][0]>app.board[2][0]:
            app.winner = 2
        else:
            app.winner = 1
    elif (app.board[1][0] == [0, 0, 0, 0, 0, 0] or 
            app.board[1][1] == [0, 0, 0, 0, 0, 0]):
        app.gameOver = True
        determineWinner(app)
    
    # repeately calls to drop pebbles
    if app.player1MadeTurn:
        takeTurnPlayer1(app, app.selectR, app.selectC)
    elif app.player2MadeTurn:
        takeTurnPlayer2(app, app.selectR, app.selectC)

# finds winner based on board values
def determineWinner(app):
    if (sum(app.board[1][0])+app.board[0][0] > 
            sum(app.board[1][1])+app.board[2][0]):
        app.winner = 2
    elif (sum(app.board[1][0])+app.board[0][0] < 
            sum(app.board[1][1])+app.board[2][0]):
        app.winner = 1

# draws objects to canvas
def redrawAll(app, canvas):
    canvas.create_image(app.width/2, app.height/2, image=ImageTk.PhotoImage(app.image1))

    drawHomeScreen(app, canvas)
    drawGameInfo(app, canvas)
    drawBoard(app, canvas)
    drawPebbles(app, canvas)
    drawBoardText(app, canvas)
    drawGameOver(app, canvas)

def drawHomeScreen(app, canvas):
    if not app.inHomeScreen:return
    canvas.create_text(app.width/2, app.height/4, 
                            text="Mancala!", fill="steelblue",
                            font="Helvetica 60 bold")
    canvas.create_text(app.width/2, app.height/3, 
                    text="Choose a game mode", fill="steelblue",
                    font="Arial 20")

    canvas.create_text(app.width*(1/4), app.height/2, text="Easy", font="Arial 40", fill="RosyBrown4")
    canvas.create_text(app.width*(1/4), app.height/2+40, text="Press 'e'", font="Courier 20", fill="RosyBrown4")

    canvas.create_text(app.width*(2/4), app.height/2, text="Medium", font="Arial 40", fill="RosyBrown4")
    canvas.create_text(app.width*(2/4), app.height/2+40, text="Press 'm'", font="Courier 20", fill="RosyBrown4")

    canvas.create_text(app.width*(3/4), app.height/2, text="Hard", font="Arial 40", fill="RosyBrown4")
    canvas.create_text(app.width*(3/4), app.height/2+40, text="Press 'h'", font="Courier 20", fill="RosyBrown4")

    canvas.create_text(app.width/2, app.height*(3/4)+20, text="Rules:\n1: Select a cell to move its pebbles\n2: One pebble will drop in each \nproceeding cell\n3: If your last pebble ends in \nyour mancala, you get another turn\n4: Try to accumulate over 24 \npebbles in your row + mancala", font="Courier 20", fill="RosyBrown4")

# draws player commands/game info
def drawGameInfo(app, canvas):
    if  not (app.inEasyMode or app.inMedMode or app.inHardMode): return
    canvas.create_text(app.width/2, app.height/5-20, 
                        text="Press 'c' to activate computer mode", fill="RosyBrown4",
                        font="Courier 20 ")

    if app.inEasyMode:
        canvas.create_text(app.width/2, app.height/4, 
                                text="Easy Mode", fill="steelblue", 
                                font="Arial 40")
    elif app.inMedMode:
        canvas.create_text(app.width/2, app.height/4, 
                                text="Medium Mode", fill="steelblue",
                                font="Arial 40")    
    elif app.inHardMode:
        canvas.create_text(app.width/2, app.height/4, 
                                text="Hard Mode", fill="steelblue",
                                font="Arial 40")
                        

    canvas.create_text(app.width/2, app.height/3, 
                    text=f'Current Player: {app.currentPlayer}', fill="steelblue", 
                    font="Arial 20")

    if app.inComputerMode: 
        canvas.create_text(app.width/2, app.height*(4/5), 
                        text=f'Computer Mode Activated', fill="RosyBrown4",
                        font="Courier 20 ")
        if app.currentPlayer == 2:
            canvas.create_text(app.width/2, app.height*(3/4), 
                        text=f'Computer\'s Turn. Computer chose {app.selectC}', fill="RosyBrown4",
                        font="Courier 20 ")

    if app.gameOver: return
    if not app.player1MadeTurn and not app.player2MadeTurn:
        canvas.create_text(app.width/2, app.height*(2/5), 
                        text=f'Please select a cell to begin.', fill="RosyBrown4",
                        font="Courier 20 ")
    else:
        if app.zeroCellClick: 
            canvas.create_text(app.width/2, app.height*(2/5), 
                            text="Please select a non-zero cell", fill="RosyBrown4",
                            font="Courier 20 ")
        elif app.takeAnotherTurn: 
            canvas.create_text(app.width/2, app.height*(2/5), fill="RosyBrown4",
                            text="Take another turn", 
                            font="Courier 20 ")
        elif app.illegalRowClick: 
            canvas.create_text(app.width/2, app.height*(2/5), 
                            text="Please select a cell in the other row", fill="RosyBrown4",
                            font="Courier 20 ")
        else:
            canvas.create_text(app.width/2, app.height*(2/5), 
                            text=f'Pebbles on hand: {app.currNumPebbles}', fill="RosyBrown4",
                            font="Courier 20 ")

# draws winner and end of game
def drawGameOver(app, canvas):
    if  not (app.inEasyMode or app.inMedMode or app.inHardMode): return    
    # draws game over
    if app.gameOver:
        rectY = (app.height/2 + app.height/2+app.homeBoardHeight)/2
        (canvas.create_oval(app.width/2-70, rectY-20, 
                                    app.width/2+70, rectY+20, fill="lightpink", width=0))
        canvas.create_text(app.width/2, rectY, 
                        text="Game Over!", 
                        font="Arial 20 ")

        if app.winner == 2:
                # player 2 wins
            if app.inComputerMode:
                canvas.create_text(app.width/2, app.height*(2/5), 
                            text="Computer wins!", fill="RosyBrown4",
                            font="Courier 20 ")
            else:
                canvas.create_text(app.width/2, app.height*(2/5), 
                                text="Player 2 wins!", fill="RosyBrown4",
                                font="Courier 20 ")
        elif app.winner == 1:
                # player 1 wins
            canvas.create_text(app.width/2, app.height*(2/5), 
                            text="Player 1 wins!", fill="RosyBrown4",
                            font="Courier 20 ")
        else:
                # tie
            canvas.create_text(app.width/2, app.height*(2/5), 
                            text="It's a tie!", fill="RosyBrown4",
                            font="Courier 20 ")

# makes mancala board
def drawBoard(app, canvas):
    if  not (app.inEasyMode or app.inMedMode or app.inHardMode): return 
    # player 2 mancala
    canvas.create_rectangle(app.margin, app.height/2, 
                        app.homeBoardWidth+app.margin, 
                        app.height/2+app.homeBoardHeight, fill="papayawhip", width=0)

    cx = ((app.margin)+(app.homeBoardWidth+app.margin))/2
    cy = ((app.height/2)+(app.height/2+app.homeBoardHeight))/2
    rx = (((app.homeBoardWidth+app.margin)-(app.margin))/2) - 5
    ry = (((app.height/2+app.homeBoardHeight)-(app.height/2))/2) - 5

    canvas.create_oval(cx-rx, cy-ry, cx+rx, cy+ry, fill="peachpuff", width=0)

    # middle board
    for row in range(len(app.board[1])):
        for col in range(len(app.board[1][0])):
            (x0, y0, x1, y1) = getCellBounds(app, row, col)
            canvas.create_rectangle(x0, y0, x1, y1, fill="papayawhip", width=0)

            cx = (x0+x1)/2
            cy = (y0+y1)/2
            r = ((y1-y0)/2)-3
            color = "peachpuff"
            if row == app.selectR and col == app.selectC and not app.takeAnotherTurn and not app.illegalRowClick and not app.zeroCellClick:
                color = "lightpink"
            canvas.create_oval(cx-r, cy-r, cx+r, cy+r, fill=color, width=0)


    # player 1 mancala
    canvas.create_rectangle(app.width-app.margin-app.homeBoardWidth, 
                            app.height/2, app.width-app.margin, 
                            app.height/2+app.homeBoardHeight, fill="papayawhip", width=0)

    cx = ((app.width-app.margin-app.homeBoardWidth)+(app.width-app.margin))/2
    cy = ((app.height/2)+(app.height/2+app.homeBoardHeight))/2
    rx = (((app.width-app.margin)-(app.width-app.margin-app.homeBoardWidth))/2) - 5
    ry = (((app.height/2+app.homeBoardHeight)-(app.height/2))/2) - 5

    canvas.create_oval(cx-rx, cy-ry, cx+rx, cy+ry, fill="peachpuff", width=0)

def drawBoardText(app, canvas):
    if  not (app.inEasyMode or app.inMedMode or app.inHardMode): return 
    
    # player 2 mancala
    canvas.create_text((app.margin+app.homeBoardWidth+app.margin)/2, 
                    (app.height/2)-20, 
                    text=app.board[0], fill="rosybrown",
                    font="Arial 15 bold")

    # middle board
    for row in range(len(app.board[1])):
        for col in range(len(app.board[1][0])):
            (x0, y0, x1, y1) = getCellBounds(app, row, col)

            if row == 0:
                canvas.create_text((x0+x1)/2, (app.height/2)-20, 
                                text=app.board[1][row][col], fill="rosybrown",
                                font="Arial 15 bold")
            else:
                canvas.create_text((x0+x1)/2, (y1)+20, 
                                text=app.board[1][row][col], fill="rosybrown",
                                font="Arial 15 bold")

    # player 1 mancala
    canvas.create_text((app.width-app.margin-app.homeBoardWidth
                                                    +app.width-app.margin)/2, 
                        (app.height/2+app.homeBoardHeight)+20, 
                        text=app.board[2], fill="rosybrown",
                        font="Arial 15 bold")        

def createPebbles(app):
    L = [[], [], []]
    for row in range(len(app.board[1])):
        newRow = []
        for col in range(len(app.board[1][0])):
            # create pebble values 
            (x0, y0, x1, y1) = getCellBounds(app, row, col)
            
            numPebbles = []
            for pebbles in range(app.board[1][row][col]):
                newPebble = Pebble(x0, y0, app)
                numPebbles.append(newPebble)

            newRow.append(numPebbles)
        L[1].append(newRow)
    return L

def updatePebbles(app):
    # remove and update by removing last pebble and adding it to new cell location

    if len(app.pebbles[1][app.selectR][app.selectC]) > 0:
        pebbleToAdd = app.pebbles[1][app.selectR][app.selectC].pop()

    # update player2's mancala
    numPebblesToAdd = app.board[0][0] - len(app.pebbles[0])
    if numPebblesToAdd==1:
        app.pebbles[0].append(pebbleToAdd)

    for row in range(2):
        for col in range(6):
            # add pebbles
            numPebblesToAdd = app.board[1][row][col] - len(app.pebbles[1][row][col])
            if numPebblesToAdd == 1: 
                app.pebbles[1][row][col].append(pebbleToAdd)

    # update player1's mancala
    numPebblesToAdd = app.board[2][0] - len(app.pebbles[2])
    if numPebblesToAdd==1:
        app.pebbles[2].append(pebbleToAdd)

def drawPebbles(app, canvas):
    if  not (app.inEasyMode or app.inMedMode or app.inHardMode): return 

    # in player 2's mancala
    for i in range(len(app.pebbles[0])):
            (x0, y0, x1, y1) = (app.margin, app.height/2, 
                        app.homeBoardWidth+app.margin, 
                        app.height/2+app.homeBoardHeight)
            peb = app.pebbles[0][i]
            peb.setX0(x0)
            peb.setY0(y0+20)
            canvas.create_oval(peb.cx-peb.r, peb.cy-peb.r, peb.cx+peb.r, peb.cy+peb.r, fill=peb.color, width=0)

    # on board
    for row in range(2):
        for col in range(6):
            if app.board[1][row][col] == 0: continue
            else:
                for i in range(len(app.pebbles[1][row][col])):
                    (x0, y0, x1, y1) = getCellBounds(app, row, col)
                    peb = app.pebbles[1][row][col][i]
                    peb.setX0(x0)
                    peb.setY0(y0)
                    canvas.create_oval(peb.cx-peb.r, peb.cy-peb.r, peb.cx+peb.r, peb.cy+peb.r, fill=peb.color, width=0)

    # in player 1's mancala
    for i in range(len(app.pebbles[2])):
            (x0, y0, x1, y1) = (app.width-app.margin-app.homeBoardWidth, 
                            app.height/2, app.width-app.margin, 
                            app.height/2+app.homeBoardHeight)
            peb = app.pebbles[2][i]
            peb.setX0(x0)
            peb.setY0(y0+20)
            canvas.create_oval(peb.cx-peb.r, peb.cy-peb.r, peb.cx+peb.r, peb.cy+peb.r, fill=peb.color, width=0)

runApp(width=600, height=600)